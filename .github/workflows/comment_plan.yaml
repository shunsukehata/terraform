name: Terraform Plan (Comment Trigger) # ワークフロー名をコメント用と明確にする

on:
  # Pull Requestのコメントが作成されたときにトリガー
  issue_comment:
    types:
      - created

jobs:
  # コメントによるPlan実行ジョブ
  comment_plan:
    name: Plan on Comment
    runs-on: ubuntu-latest
    # コメントトリガーで、コメント内容が"plan"で、それがPRに対するコメントの場合に実行
    # トップレベルのonでissue_commentのみを指定したので、ここではコメント内容とPRに対するコメントかのチェックのみでOK
    if: contains(github.event.comment.body, 'plan') && github.event.issue.pull_request
    permissions:
      pull-requests: write # PRにコメントするために必要
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.issue.pull_request.head.ref }} # PRのHEADをチェックアウト
          repository: ${{ github.event.issue.pull_request.head.repo.full_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # スクリプト実行に必要なNode.js環境をセットアップ (actions/github-script が内部で使うため不要な可能性あり)
      # 明示的にバージョンを指定したい場合は残しておきます
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # スクリプトの実行に必要なNode.jsバージョンを指定

      # Terraform Init と Plan (JSON出力)
      - name: Terraform Init and Plan (JSON)
        run: |
          terraform init -backend=true -reconfigure
          # Plan結果をJSON形式で出力し、ファイルに保存
          terraform plan -json > plan.json
        working-directory: ./envs/dev/souvenirConsultApp/ # Terraformのルートモジュールディレクトリを指定

      # JavaScriptファイルの内容を読み込み、環境変数として設定
      - name: Read Script File
        id: read_script # このステップにIDを付与
        run: |
          SCRIPT_CONTENT=$(cat ./scripts/format_plan_comment.js) # ファイル内容を読み込み
          # ファイル内容を複数行の環境変数として設定
          # 環境変数名は ACTIONS_STEP_DEBUG=true でデバッグログに出力されます
          echo "SCRIPT_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$SCRIPT_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        # working-directory はデフォルトのリポジトリルートでOK
        # スクリプトファイルのパスはリポジトリルートからの相対パスで指定

      # Plan結果をパースして差分形式でコメント (読み込んだスクリプト内容をインラインで実行)
      - name: Add Formatted Plan comment to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # 環境変数からスクリプト内容を取得し、インラインスクリプトとして渡す
          script: ${{ env.SCRIPT_CONTENT }} # ★ ここを修正 ★
