name: Terraform Plan (Comment Trigger) # „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂêç„Çí„Ç≥„É°„É≥„ÉàÁî®„Å®ÊòéÁ¢∫„Å´„Åô„Çã

on:
  # Pull Request„ÅÆ„Ç≥„É°„É≥„Éà„Åå‰ΩúÊàê„Åï„Çå„Åü„Å®„Åç„Å´„Éà„É™„Ç¨„Éº
  issue_comment:
    types:
      - created

jobs:
  # „Ç≥„É°„É≥„Éà„Å´„Çà„ÇãPlanÂÆüË°å„Ç∏„Éß„Éñ
  comment_plan:
    name: Plan on Comment
    runs-on: ubuntu-latest
    # „Ç≥„É°„É≥„Éà„Éà„É™„Ç¨„Éº„Åß„ÄÅ„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ„Åå"plan"„Åß„ÄÅ„Åù„Çå„ÅåPR„Å´ÂØæ„Åô„Çã„Ç≥„É°„É≥„Éà„ÅÆÂ†¥Âêà„Å´ÂÆüË°å
    # „Éà„ÉÉ„Éó„É¨„Éô„É´„ÅÆon„Åßissue_comment„ÅÆ„Åø„ÇíÊåáÂÆö„Åó„Åü„ÅÆ„Åß„ÄÅ„Åì„Åì„Åß„ÅØ„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ„Å®PR„Å´ÂØæ„Åô„Çã„Ç≥„É°„É≥„Éà„Åã„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÅÆ„Åø„ÅßOK
    if: contains(github.event.comment.body, 'plan') && github.event.issue.pull_request
    permissions:
      pull-requests: write # PR„Å´„Ç≥„É°„É≥„Éà„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.issue.pull_request.head.ref }} # PR„ÅÆHEAD„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà
          repository: ${{ github.event.issue.pull_request.head.repo.full_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å„Å´ÂøÖË¶Å„Å™Node.jsÁí∞Â¢É„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # „Çπ„ÇØ„É™„Éó„Éà„ÅÆÂÆüË°å„Å´ÂøÖË¶Å„Å™Node.js„Éê„Éº„Ç∏„Éß„É≥„ÇíÊåáÂÆö

      # Terraform Init „Å® Plan (JSONÂá∫Âäõ)
      - name: Terraform Init and Plan (JSON)
        run: |
          terraform init -backend=true -reconfigure
          # PlanÁµêÊûú„ÇíJSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„ÄÅ„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
          terraform plan -json > plan.json
        working-directory: ./envs/dev/souvenirConsultApp/ # Terraform„ÅÆ„É´„Éº„Éà„É¢„Ç∏„É•„Éº„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåáÂÆö

      # PlanÁµêÊûú„Çí„Éë„Éº„Çπ„Åó„Å¶Â∑ÆÂàÜÂΩ¢Âºè„Åß„Ç≥„É°„É≥„Éà (Âà•„Éï„Ç°„Ç§„É´„ÅßÂÆöÁæ©„Åó„Åü„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å)
      - name: Add Formatted Plan comment to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Âà•„Éï„Ç°„Ç§„É´„Å´ÂàÜ„Åë„Åü„Çπ„ÇØ„É™„Éó„Éà„ÇíÊåáÂÆö
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            
            \`\`\`terraform
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`diff
            ${{ env.PLAN }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Working Directory: \`${{ matrix.directory }}\``;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          
