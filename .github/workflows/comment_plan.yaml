name: Terraform Plan (Comment Trigger) # ワークフロー名をコメント用と明確にする

on:
  # Pull Requestのコメントが作成されたときにトリガー
  issue_comment:
    types:
      - created

jobs:
  # コメントによるPlan実行ジョブ
  comment_plan:
    name: Plan on Comment
    runs-on: ubuntu-latest
    # コメントトリガーで、コメント内容が"plan"で、それがPRに対するコメントの場合に実行
    # トップレベルのonでissue_commentのみを指定したので、ここではコメント内容とPRに対するコメントかのチェックのみでOK
    if: contains(github.event.comment.body, 'plan') && github.event.issue.pull_request
    permissions:
      pull-requests: write # PRにコメントするために必要
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.issue.pull_request.head.ref }} # PRのHEADをチェックアウト
          repository: ${{ github.event.issue.pull_request.head.repo.full_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # Terraform Init と Plan
      - name: Terraform Init and Plan
        run: |
          terraform init -backend=true -reconfigure
          # Plan結果を標準出力に出力し、ファイルに保存
          terraform plan > plan.txt
        working-directory: ./envs/dev/souvenirConsultApp/ # Terraformのルートモジュールディレクトリを指定

      # Planの内容を環境変数に入れる
      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # PRコメントにPlanの結果を投稿
      - name: Read Plan and Post Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Result')
            })

            // 2. Prepare format of the comment
            const output = `
            #### Terraform Plan 📖
            <details><summary>Show Plan</summary>

            \`\`\`diff
            ${{ env.PLAN }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Working Directory: \`${{ github.workspace }}/envs/dev/souvenirConsultApp\``;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }