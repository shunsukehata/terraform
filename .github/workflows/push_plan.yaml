name: Terraform Push Plan

on:
  # Pull Requestのオープン・同期・リオープン時にトリガー
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened

jobs:
  # Pull Requestのオープン・同期・リオープン時のPlan実行ジョブ
  pull_request_plan:
    name: Plan on PR
    runs-on: ubuntu-latest
    # PRオープン・同期・リオープン時に実行
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # .tfファイルの差分があるかチェック
      - name: Check for .tf file changes
        id: check_files
        uses: dorny/paths-filter@v3
        with:
          filters: |
            tf_changed:
              - '**/*.tf'
              - '.terraform.lock.hcl' # ロックファイルも対象に含める

      # .tfファイルの差分がある場合のみPlanを実行
      - name: Terraform Init and Plan
        if: steps.check_files.outputs.tf_changed == 'true'
        run: |
          terraform init -backend=true -reconfigure
          terraform plan -no-color
        working-directory: ./envs/dev/souvenirConsultApp/

          # Planの結果を整形してハイライト可能なdiff形式に変換
      - name: Reformat Plan
        run: |
         echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
         | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

        # Planの内容を環境変数に入れる
      - name: Put Plan in Env Var
        run: |
           PLAN=$(cat plan.txt)
           echo "PLAN<<EOF" >> $GITHUB_ENV
           echo "$PLAN" >> $GITHUB_ENV
           echo "EOF" >> $GITHUB_ENV

        # PRコメントにPlanの結果を投稿
      - name: Read Plan and Post Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
             // 1. Retrieve existing bot comments for the PR
             const { data: comments } = await github.rest.issues.listComments({
               owner: context.repo.owner,
               repo: context.repo.repo,
               issue_number: context.issue.number,
             })
             const botComment = comments.find(comment => {
               return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
             })
             
             // 2. Prepare format of the comment
             const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
             #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
             #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
             <details><summary>Validation Output</summary>
             
             \`\`\`terraform
             ${{ steps.validate.outputs.stdout }}
             \`\`\`
             
             </details>
             
             #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
             
             <details><summary>Show Plan</summary>
             
             \`\`\`diff
             ${{ env.PLAN }}
             \`\`\`
             
             </details>
             
             *Pusher: @${{ github.actor }}, Working Directory: \`${{ matrix.directory }}\``;
             
             // 3. If we have a comment, update it, otherwise create a new one
             if (botComment) {
               await github.rest.issues.updateComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 comment_id: botComment.id,
                 body: output
               })
             } else {
               await github.rest.issues.createComment({
                 issue_number: context.issue.number,
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 body: output
               })
             }


#      # 差分がある場合のみPlan結果をPRにコメント
#      - name: Add Plan comment to PR
#        if: steps.check_files.outputs.tf_changed == 'true'
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const fs = require('fs');
#            // ファイルパスを修正
#            const planOutput = fs.readFileSync('./envs/dev/souvenirConsultApp/plan.txt', 'utf8');
#            const pull_request_number = context.issue.number;
#            const comment = `
#            ### \`terraform plan\` Result
#
#            <details><summary>Click to expand plan</summary>
#
#            \`\`\`hcl
#            ${planOutput}
#            \`\`\`
#
#            </details>
#
#            _Ran on commit \`${context.sha}\`_
#            `;
#
#            await github.rest.issues.createComment({
#              issue_number: pull_request_number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: comment
#            });

      # .tfファイルの差分がない場合にその旨をコメント
      - name: Add No changes comment to PR
        if: steps.check_files.outputs.tf_changed == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_request_number = context.issue.number;
            const comment = `
            ### \`terraform plan\` Skipped
            
            No changes detected in \`.tf\` files.
            
            _Ran on commit \`${context.sha}\`_
            `;
            
            await github.rest.issues.createComment({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
    